'''
1. 적용 알고리즘 : DP
부분부분의 결과를 저장 후
필요할 때 재사용 하여 새로운 결과를 도출
보통 경우의 수를 구해야 할 때 많이 사용되며 점화식을 이용하여 문제를 해결
====================================================================
2. 접근법
점화식을 이용한 문제
# 1. 1명이 온 경우
seat[1] = 1 -> 경우의 수는 1

# 2. 2명이 온 경우
seat[2] = 2 -> 1 2, 2 1
서로 자리를 바꿀 수 있기 때문에 경우의 수는 2가 된다.

# 3. 3명이 온 경우
seat[3] = 3 -> 1 2 3, 1 3 2, 2 1 3
서로 자리를 바꾸는데 3 번이 1번자리에는 앉을 수 없기 때문에 경우의 수는 3이 된다.

이런식으로 경우의 수에 따라 좌석을 초기화 준다.
====================================================================
3. 코드에 대한 설명 아래쪽에 작성해 둠
====================================================================
4. 실행시간 => 48ms
====================================================================
'''

import sys
input = sys.stdin.readline

N = int(input()) # 좌석의 개수 1 ~ 40
M = int(input()) # 고정석의 개수 0 ~ N
fixed_seat = [int(input()) for _ in range(M)] # 고정석 위치

seat = [0] * (N + 1) # 좌석별 경우의 수

# 경우의 수 초기화
seat[0] = 1
seat[1] = 1 # 1

# 예외 케이스
# 만약 모든 좌석이 고정석인 경우 1을 출력해야 함
# 좌석 길이가 1이고 고정석이 1이며 고정석이 1번인 경우 -> 정답 1
if N >= 2:
    seat[2] = 2 # 2

# 좌석에 앉을 수 있는 경우의 수 구하기
# 현재 자리의 경우의 수는 이전 경우의 수 + 그 이전의 경우의 수를 더해주면 나옴
# 즉 자리를 바꾸지 않은 경우의 수에 자리를 바꾼 경우의 수를 더해주는 것
for i in range(3, N+1):
    seat[i] = seat[i-1] + seat[i-2]

answer = 1
if M >= 1: # 고정석이 있는경우 제외해주기
    temp = 0 # 임시변수
    for i in range(M):
        answer *= seat[fixed_seat[i] - 1 - temp]
        temp = fixed_seat[i]
    answer *= seat[N - temp]
else:
    answer = seat[N]

print(answer)

'''
4번이 고정석인 경우
경우의 수는 현재 좌석번호 seat[4] 가 위의 경우의 수를 구하는 조건을 만족하지 않으므로
현재 자리에서 -1해서 3번 좌석의 경우의 수가 됨 여기서 temp를 또 빼주는 이유는 
고정석이 2자리 이상인 경우 seat를 이용해 구한 경우의 수에서 2번의 고정석 경우의 수를 빼주어야 하는데
seat를 이용한 경우의 수는 / 이전 경우의 수(자리를 바꾸기 전) + 전전의 경우의 수(자리를 바꾼) 이용하여
누적값으로 경우의 수를 구하기 때문
따라서 7번도 고정석인 경우
seat[7] - 1 - 4 가 되므로 seat[2] 의 경우의 수가 seat[7] 이 가질 수 있는 최대의 경우의 수가 됨

answer 에 seat[N - temp] 를 해주는 이유?
->전체 좌석에서 고정석의 경우를 다 빼주고 temp에는 마지막 고정석 번호가 들어가 있는 상태
현재 answer에는 고정석의 경우의 수를 빼준 경우의 수가 들어가 있음 고정석의 경우의 수를 빼줘도
seat의 번호는 이후로도 있으니 그 경우의 수를 더해주어야 함
고정석이 7번인 경우 아직 8번과 9번의 경우의 수가 있으니 그 경우의 수를 정답에 포함해 주어야 제대로된 정답이 나오게 됨

경우의 수를 구하는 방식은 이전에 나온 경우의 수에 지금의 경우의 수를 곱해주면 전체의 경우의 수가 나오게 된다.
'''