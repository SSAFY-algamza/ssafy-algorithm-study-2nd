"""
1. 적용 알고리즘
동적 계획법(DP)

====================================================


2. 문제 풀이를 위한 접근 방식 설명
먼저 좌석 갯수에 따른 자리 선택 가짓수를 파악해서 점화식 세우기
좌석 1개 -> 1 / 1가지
좌석 2개 -> 12 21 / 2가지
좌석 3개 -> 123 213 132 / 3가지
좌석 4개 -> 1234 2134 1324 1243 2143 / 5가지
좌석 5개 -> 12345 21345 13245 12435 12354 21435 21354 13254 / 8가지
점화식 : dp[n] = dp[n-1] + dp[n-2]

vip좌석은 고정이므로 vip를 제외한 나머지를 붙어있는 좌석끼리 묶어 가짓수 계산하고 곱해주면 되겠다
ex) 9자리 / 4번, 7번 vip => (1,2,3) 가짓수 * (5,6) 가짓수 * (8,9) 가짓수

====================================================

3. 기본 코드에 대한 설명
아래 코드에 주석으로 설명

====================================================

4. 시간 복잡도, 공간 복잡도
시간 복잡도: O(N)
공간 복잡도: O(N)

"""

N = int(input())
M = int(input())

# 해당 번호 좌석이 vip인지 아닌지 저장하는 리스트
isVip = [False]*(N+1)
for _ in range(M):
    isVip[int(input())] = True

# dp[n] => n개의 좌석이 붙어있을때 자리를 바꿔앉을 수 있는 가짓수
dp = [1]*(N+3)
dp[1] = 1
dp[2] = 2
dp[3] = 3
for i in range(3, N+1):
    dp[i] = dp[i-1]+dp[i-2]

cnt = 0
ans = 1

# vip 좌석 번호가 나오기 전까지 붙어있는 좌석 수 카운트해서 dp[n] 구한 뒤 ans 변수에 곱해준다.
for i in range(1, N+1):
    if isVip[i]:
        ans *= dp[cnt]
        cnt = 0
    else:
        cnt += 1
ans *= dp[cnt]

print(ans)



